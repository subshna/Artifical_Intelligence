PEP :  Python Enhancement Proposals


Indentation: 
	Use 4 spaces per indentation level.
	Tabs or Spaces?	Spaces are the preferred indentation method.
	Tabs should be used solely to remain consistent with code that is already indented with tabs.
	Python 3 disallows mixing the use of tabs and spaces for indentation.
	Python 2 code indented with a mixture of tabs and spaces should be converted to using spaces exclusively.

Maximum Line Length:
	Limit all lines to a maximum of 79 characters.
	For flowing long blocks of text with fewer structural restrictions (docstrings or comments), the line length should be 	limited to 72 characters.

Blank Lines
	Surround top-level function and class definitions with two blank lines.
	Method definitions inside a class are surrounded by a single blank line.
	Extra blank lines may be used (sparingly) to separate groups of related 	functions. Blank lines may be omitted between a  bunch of 	related one-	liners (e.g. a set of dummy implementations).


Imports
	Imports should usually be on separate lines Imports are always put at the 	top of the file, just after any module comments and docstrings, and 	before module globals and constants.

String Quotes
	In Python, single-quoted strings and double-quoted strings are the same. 	This PEP does not make a recommendation for this. Pick a rule and stick 	to it. When a string contains single or double quote characters, however, 	use the other one to avoid backslashes in the string. It improves 	readability. For triple-quoted strings, always use double quote characters 	to be consistent with the docstring convention in PEP 257

Block Comments
	Block comments generally apply to some (or all) code that follows them, 	and are indented to the same level as that code. Each line of a block 	comment starts with a # and a single space (unless it is indented text 	inside the comment).
	Paragraphs inside a block comment are separated by a line containing a 	single # .

Inline Comments
	Use inline comments sparingly.
	An inline comment is a comment on the same line as a statement. Inline 	comments should be separated by at least two spaces from the 	statement. They should start with a # and a single space.

Documentation Strings
	Conventions for writing good documentation strings (a.k.a. "docstrings") 	are immortalized in PEP 257 .Write docstrings for all public modules, 	functions, classes, and methods. Docstrings are not necessary for non-	public methods, but you should have a comment that describes what the 	method does. This comment should appear after the 				def line. PEP 257 describes good docstring conventions. Note that most 		importantly, the """ that ends a multiline docstring should be on a line by 	itself.

Naming Conventions
	The naming conventions of Python's library are a bit of a mess, so we'll 	never get this completely consistent -- nevertheless, here are the currently 	recommended naming standards. New modules and packages (including 	third party frameworks) should be written to these standards, but where 	an existing library has a different style, internal consistency is preferred.
	
Names to Avoid
	Never use the characters 'l' (lowercase letter el), 'O' (uppercase letter 		oh), or 'I' (uppercase letter eye) as single character variable names.

Package and Module Names
	Modules should have short, all-lowercase names. Underscores can be 	used in the module name if it improves readability. 	Python packages 		should also have short, all-lowercase names, although the use of 		underscores is discouraged. When an extension module written in C or C	++ has an accompanying Python module that provides a higher level (e.g. 		more object oriented) interface, the C/C++ module has a leading 	underscore (e.g. _socket ).

Class Names
	Class names should normally use the CapWords convention.

Exception Names
	Because exceptions should be classes, the class naming convention 	applies here. However, you should use the suffix "Error" on your 	exception names (if the exception actually is an error).

Function Names
	Function names should be lowercase, with words separated by 		underscores as necessary to improve readability. mixedCase is allowed 			only in contexts where that's already the prevailing style (e.g. 	threading.py), to retain backwards compatibility.

Function and method arguments
	Always use self for the first argument to instance methods.

Method Names and Instance Variables
	Use the function naming rules: lowercase with words separated by 	underscores as necessary to improve readability.

Constants
	Constants are usually defined on a module level and written in all capital 	letters with underscores separating words. Examples include 	MAX_OVERFLOW and TOTAL .